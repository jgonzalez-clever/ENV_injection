name: Create VAR REP

on:
  workflow_dispatch:
jobs:

  Get-Repositories-To-Inject:
      runs-on: ubuntu-latest
      outputs:
        REPOSITORIES: ${{ steps.set-matrix.outputs.REPO }}
        OWNER: ${{ steps.set-owner.outputs.OW }}
        ENV-NAME: ${{ steps.set-name-env.outputs.NE }}
      steps:
        - name: Checkout to repository
          uses: actions/checkout@v3
       
        - name: Set matrix data
          id: set-matrix
          run: echo "REPO=$(jq -c -r '.repositories | map(.repo_name)' < ./repositories.json)" >> $GITHUB_OUTPUT 

        - name: Set owner
          id: set-owner
          run: echo "OW=$(jq -r '.owner' repositories.json)" >> $GITHUB_OUTPUT 

        - name: Set name env
          id: set-name-env
          run: echo "NE=$(jq -r '.name_env' env.json)" >> $GITHUB_OUTPUT 
        
  create-ENV:
    runs-on: ubuntu-latest
    needs: [Get-Repositories-To-Inject]
    strategy:
        max-parallel: 1
        # SET MATRIX WITH repositories TO MIGRATE
        matrix: 
            repositorie: ${{fromJson(needs.Get-Repositories-To-Inject.outputs.REPOSITORIES)}}
    steps:
      - uses: actions/checkout@v4

      - name: Checkout to repository
        run: echo "${{ matrix.repositorie }}"

      - name: Actualizar entornos
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          OWNER: ${{ needs.Get-Repositories-To-Inject.outputs.OWNER }}
          ENV-NAME: ${{ needs.Get-Repositories-To-Inject.outputs.ENV-NAME }}
        run: |
            echo "${{ env.OWNER }}"
            echo "${{ matrix.repositorie }}"
            
            response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ env.GH_TOKEN }}" "https://api.github.com/repos/${{ env.OWNER }}/${{ matrix.repositorie }}")

            # Verificar el código de respuesta
            if [ "$response" -eq 200 ]; then
              echo "El repositorio ${{ env.OWNER }}/${{ matrix.repositorie }} existe."
            else
              echo "Error: El repositorio ${{ env.OWNER }}/${{ matrix.repositorie }} no existe."
              exit 1  # Salir con un código de error
            fi


            curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ env.OWNER}}/${{ matrix.repositorie }}/actions/variables \
            -d '{"name":"USERNAME","value":"octocat"}'

            VAR_ENV=$(jq -c '.variables' var_rep.json) && echo "$VAR_ENV"
            # Obtén la longitud del array
            length=$(jq 'length' <<< "$VAR_ENV")
  
            # Itera sobre los elementos del array
            for ((i = 0; i < length; i++)); do
              # Extrae el elemento actual del array
              current_element=$(jq --argjson index "$i" '.[$index]' <<< "$VAR_ENV")
  
              # Imprime el elemento actual (puedes hacer otras operaciones aquí)
              echo "$current_element"
  
              # Realiza la solicitud curl con el elemento actual
                curl -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/${{ env.OWNER}}/${{ matrix.repositorie }}/actions/variables \
                -d "$current_element"
            done